# host is your host name without https://
# When using docker desktop kubernetes install ingress-nginx controller and use 'kubernetes.docker.internal' as host
# https://kubernetes.github.io/ingress-nginx/deploy/#docker-desktop
host: kubernetes.docker.internal

settings:
  # gATrackingID is Google Analytics tracking id
  # Input empty string to disable
  gATrackingID: G-XXXXXXXXXX
  # adminEmail will display on the page
  adminEmail: your@email.com

  # registrationAllowed setting determines whether users are allowed to register.
  # !Notice that the first registered user will always be allowed and will become the admin.
  # This setting only affects the second and later users.
  # !IF YOU ENABLE THIS OPTION, YOU WILL BE RESPONSIBLE FOR COPYRIGHT ISSUES RELATED TO VIDEO DISTRIBUTION.
  # Recorder.moe recommends that you use this system within your personal reasonable limits, and we do not assume any legal responsibility for distributing copyrighted works.
  registrationAllowed: "false"

# StorageService is the storage service for storing images and videos.
# Choose 'AzureBlobStorage' or 'S3'.
storageService: S3

azureBlob:
  storageAccountName: myrecorder
  storageAccountKey: YOUR_KEY
  # public is the public access blob container for images.
  public:
    endpoint: https://myaccount.blob.core.windows.net/mypubliccontainer
    containerName: mypubliccontainer
  # private is the private access blob container for videos.
  private:
    endpoint: https://myaccount.blob.core.windows.net/myprivatecontainer
    containerName: myprivatecontainer
  # retentionDays is the number of days to keep the video files.
  retentionDays: 4

s3:
  endpoint: s3.myendpoint.com
  # Secure determines whether to access the endpoint through HTTPS.
  secure: true
  # AccessKey and SecretKey to access S3 endpoint. Write permission is required.
  accessKey: YOUR_S3_ACCESSKEY
  secretKey: YOUR_S3_SECRETKEY
  # BucketName_Public is the public access bucket for images.
  bucketName_Public: mypublicbucket
  # BucketName_Private is the private access bucket for videos.
  bucketName_Private: myprivatebucket
  # retentionDays is the number of days to keep the video files.
  retentionDays: 4

# DatabaseService is the database service for storing data.
# Choose 'ApacheCouchDB' or 'AzureCosmosDB'.
# !Remember to set kubernetes.service.image tag too.
databaseService: ApacheCouchDB

azureCosmosDB:
  # public is the database for Videos, Channels data.
  public:
    databaseName: public
    endpoint: https://myaccount.documents.azure.com:443/
    readonlyKey: DB_PUBLIC_READONLY_KEY
    readWriteKey: DB_PUBLIC_READWRITE_KEY
  # private is the database for User data.
  private:
    databaseName: private
    endpoint: https://myprivateaccount.documents.azure.com:443/
    readWriteKey: DB_PRIVATE_READWRITE_KEY

apacheCouchDB:
  # endpoint is the endpoint of the database.
  endpoint: https://couchdb.recorder.moe
  # endpoint_readonly_account is used for the frontend.
  # !This account must only have read permission to the database for SECURITY reasons.
  # Read the documentation for more information.
  endpoint_readonly: https://username:password@couchdb.recorder.moe
  # admin_account is used for the backend and service.
  # !This account must have ADMIN permission to the database for managing indexes.
  admin:
    username: admin
    password: admin

# oAuth2 is the configuration for OAuth 2.0 login.
# !Notice that you MUST setup AT LEAST ONE provider since this system is only using OAuth 2.0 for authentication.
oAuth2:
  # Input empty string to disabled
  google:
    clientID: GOOGLE_CLIENTID
  gitHub:
    clientID: GITHUB_CLIENTID
    clientSecret: GITHUB_SECRET
  microsoft:
    clientID: MICROSOFT_CLIENTID
  discord:
    clientID: DISCORD_CLIENTID

# seq is the configuration for Seq logging server.
# Please setup a Seq server externally and input the server url and api key here.
seq:
  serverUrl: https://12.34.56.78
  apiKey: YOUR_API_KEY

# twitch is the configuration for Twitch API.
# Service need this to get twitch information.
# Read the official documentation: https://dev.twitch.tv/docs/api/get-started/#register-an-application
twitch:
  enabled: false
  clientID: TWITCH_CLIENTID
  clientSecret: TWITCH_SECRET

discord:
  enabled: false
  webhook: ""
  webhookWarning: ""
  webhookAdmin: ""
  mention:
    channel: "<@&1088065141721022535>"
    deleted: "<@&1088065179855618108>"
    admin: "<@&1068992903797542934>"
  emotes:
    recordermoe: "<:logo:1087793006922436748>"
    youtube: "<:youtube:1087785692605722767>"
    twitch: "<:twitch:1087786596138491934>"
    twitcasting: "<:twitcasting:1087785961963929742>"
    fc2: "<:fc2:1113124319346823240>"

heartbeat:
  enabled: false
  endpoint: ""

# statusUrl is the url of the status page.
# Input empty string to disabled
# Example: https://status.recorder.moe
statusUrl: ""

kubernetes:
  clusterDomain: cluster.local

  # ingress is for frontend and backend ingress settings.
  ingress:
    labels: {}

    # traefik annotations: https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#on-ingress
    annotations: {}
      # traefik.ingress.kubernetes.io/router.tls: "true"
      # traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
      # traefik.ingress.kubernetes.io/router.tls.domains.0.main: "*.recorder.moe"

    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

    # When using Traefik set this to "traefik".
    # When using docker desktop kubernetes install ingress-nginx controller and set this to "nginx".
    className: nginx

  frontend:
    image: ghcr.io/recorder-moe/livestreamrecorderfrontend:latest
    replicas: 1
    resources:
      limits:
        cpu: 50m
        memory: 30Mi
      requests:
        cpu: 10m
        memory: 15Mi
  backend:
    # image is the image of the backend.
    # Choose 'ApacheCouchDB' or 'AzureCosmosDB' tag correctly.
    image: ghcr.io/recorder-moe/livestreamrecorderbackend:ApacheCouchDB
    replicas: 1
    resources:
      limits:
        cpu: 1000m
        memory: 1000Mi
      requests:
        cpu: 100m
        memory: 300Mi
  service:
    # image is the image of the service.
    # Choose 'ApacheCouchDB' or 'AzureCosmosDB' tag correctly.
    image: ghcr.io/recorder-moe/livestreamrecorderservice:ApacheCouchDB
    # service replicas is limited to 1
    resources:
      limits:
        cpu: 3000m
        memory: 4000Mi
      requests:
        cpu: 500m
        memory: 1500Mi

    # storageClassName refers to the underlying StorageClass used for the shared volume.
    # !This storageClass must support ReadWriteMany accessMode and set reclaimPolicy to Retain.
    # It is recommended to set this up with NFS Server Provisioner with their helm chart. (https://github.com/kubernetes-sigs/nfs-ganesha-server-and-external-provisioner).
    storageClassName: nfs
    storageSize: 50Gi
