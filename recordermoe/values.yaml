# host is your host name without https://
# When using docker desktop kubernetes install ingress-nginx controller and use 'kubernetes.docker.internal' as host
# https://kubernetes.github.io/ingress-nginx/deploy/#docker-desktop
host: kubernetes.docker.internal

settings:
  # gATrackingID is Google Analytics tracking id
  # Input empty string to disable
  gATrackingID: G-XXXXXXXXXX
  # adminEmail will display on the page
  adminEmail: your@email.com
  # registrationAllowed setting determines whether users are allowed to register.
  # If set to false, only the first registered user will be allowed and will become an admin.
  registrationAllowed: "true"

# StorageService is the storage service for storing images and videos.
# Choose 'AzureBlobStorage' or 'S3'.
storageService: S3

azureBlob:
  storageAccountName: myrecorder
  storageAccountKey: YOUR_KEY
  # public is the public access blob container for images.
  public:
    endpoint: https://myaccount.blob.core.windows.net/mypubliccontainer
    containerName: mypubliccontainer
  # private is the private access blob container for videos.
  private:
    endpoint: https://myaccount.blob.core.windows.net/myprivatecontainer
    containerName: myprivatecontainer
  # retentionDays is the number of days to keep the video files.
  retentionDays: 4

s3:
  endpoint: s3.myendpoint.com
  # Secure determines whether to access the endpoint through HTTPS.
  secure: true
  # AccessKey and SecretKey to access S3 endpoint. Write permission is required.
  accessKey: YOUR_S3_ACCESSKEY
  secretKey: YOUR_S3_SECRETKEY
  # BucketName_Public is the public access bucket for images.
  bucketName_Public: mypublicbucket
  # BucketName_Private is the private access bucket for videos.
  bucketName_Private: myprivatebucket
  # retentionDays is the number of days to keep the video files.
  retentionDays: 4

azureCosmosDB:
  # public is the database for Videos, Channels data.
  public:
    endpoint: https://myaccount.documents.azure.com:443/
    readonlyKey: DB_PUBLIC_READONLY_KEY
    readWriteKey: DB_PUBLIC_READWRITE_KEY
  # private is the database for User data.
  private:
    endpoint: https://myprivateaccount.documents.azure.com:443/
    readWriteKey: DB_PRIVATE_READWRITE_KEY

# oAuth2 is the configuration for OAuth 2.0 login.
# !Notice that you MUST setup at least one provider since this system is only using OAuth 2.0 for authentication.
oAuth2:
  # Input empty string to disabled
  google:
    clientID: GOOGLE_CLIENTID
  gitHub:
    clientID: GITHUB_CLIENTID
    clientSecret: GITHUB_SECRET
  microsoft:
    clientID: MICROSOFT_CLIENTID
  discord:
    clientID: DISCORD_CLIENTID

seq:
  serverUrl: https://12.34.56.78
  apiKey: YOUR_API_KEY

twitch:
  enabled: false
  clientID: TWITCH_CLIENTID
  clientSecret: TWITCH_SECRET

discord:
  enabled: false
  webhook: ""
  webhookWarning: ""
  webhookAdmin: ""
  mention:
    channel: "<@&1088065141721022535>"
    deleted: "<@&1088065179855618108>"
    admin: "<@&1068992903797542934>"
  emotes:
    recordermoe: "<:logo:1087793006922436748>"
    youtube: "<:youtube:1087785692605722767>"
    twitch: "<:twitch:1087786596138491934>"
    twitcasting: "<:twitcasting:1087785961963929742>"
    fc2: "<:fc2:1113124319346823240>"

heartbeat:
  enabled: false
  endpoint: ""

kubernetes:
  clusterDomain: cluster.local

  # ingressClassName is for frontend and backend ingress settings.
  # When using Traefik set this to "traefik".
  # When using docker desktop kubernetes install ingress-nginx controller and set this to "nginx".
  ingressClassName: nginx

  frontend:
    image: ghcr.io/recorder-moe/livestreamrecorderfrontend:latest
    replicas: 1
    resources:
      limits:
        cpu: 250m
        memory: 300Mi
      requests:
        memory: 100Mi
  backend:
    image: ghcr.io/recorder-moe/livestreamrecorderbackend:latest
    replicas: 1
    resources:
      limits:
        cpu: 250m
        memory: 300Mi
      requests:
        memory: 100Mi
  service:
    image: ghcr.io/recorder-moe/livestreamrecorderservice:latest
    # service replicas is limited to 1
    resources:
      limits:
        cpu: 1000m
        memory: 1000Mi
      requests:
        memory: 500Mi

    # storageClassName refers to the underlying StorageClass used for the shared volume.
    # !This storageClass must support ReadWriteMany accessMode and set reclaimPolicy to Retain.
    # It is recommended to set this up with NFS Server Provisioner with their helm chart. (https://github.com/kubernetes-sigs/nfs-ganesha-server-and-external-provisioner).
    storageClassName: nfs
    storageSize: 50Gi
